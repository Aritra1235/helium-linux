--- a/components/power_metrics/energy_metrics_provider_linux.cc
+++ b/components/power_metrics/energy_metrics_provider_linux.cc
@@ -61,9 +61,9 @@
 // value of less than 1. Here, we only consider cpu0. See details in
 // https://man7.org/linux/man-pages/man2/perf_event_open.2.html.
 base::ScopedFD OpenPerfEvent(perf_event_attr* perf_attr) {
-  base::ScopedFD perf_fd{syscall(__NR_perf_event_open, perf_attr, /*pid=*/-1,
+  base::ScopedFD perf_fd{(int)syscall(__NR_perf_event_open, perf_attr, /*pid=*/-1,
                                  /*cpu=*/0, /*group_fd=*/-1,
-                                 PERF_FLAG_FD_CLOEXEC)};
+                                 PERF_FLAG_FD_CLOEXEC)};
   return perf_fd;
 }

--- a/third_party/webrtc/pc/legacy_stats_collector.cc
+++ b/third_party/webrtc/pc/legacy_stats_collector.cc
@@ -188,9 +188,9 @@
       {StatsReport::kStatsValueNameAccelerateRate, info.accelerate_rate},
       {StatsReport::kStatsValueNamePreemptiveExpandRate,
        info.preemptive_expand_rate},
-      {StatsReport::kStatsValueNameTotalAudioEnergy, info.total_output_energy},
+      {StatsReport::kStatsValueNameTotalAudioEnergy, (float)info.total_output_energy},
       {StatsReport::kStatsValueNameTotalSamplesDuration,
-       info.total_output_duration}};
+       (float)info.total_output_duration}};
 
   const IntForAdd ints[] = {
       {StatsReport::kStatsValueNameCurrentDelayMs, info.delay_estimate_ms},
@@ -244,9 +244,9 @@
   SetAudioProcessingStats(report, info.apm_statistics);
 
   const FloatForAdd floats[] = {
-      {StatsReport::kStatsValueNameTotalAudioEnergy, info.total_input_energy},
+      {StatsReport::kStatsValueNameTotalAudioEnergy, (float)info.total_input_energy},
       {StatsReport::kStatsValueNameTotalSamplesDuration,
-       info.total_input_duration}};
+       (float)info.total_input_duration}};
 
   RTC_DCHECK_GE(info.audio_level, 0);
   const IntForAdd ints[] = {
@@ -340,7 +340,7 @@
       {StatsReport::kStatsValueNamePlisSent, info.plis_sent},
       {StatsReport::kStatsValueNameRenderDelayMs, info.render_delay_ms},
       {StatsReport::kStatsValueNameTargetDelayMs, info.target_delay_ms},
-      {StatsReport::kStatsValueNameFramesDecoded, info.frames_decoded},
+      {StatsReport::kStatsValueNameFramesDecoded, (int)info.frames_decoded},
   };
 
   for (const auto& i : ints)
@@ -384,15 +384,15 @@
        info.encode_usage_percent},
       {StatsReport::kStatsValueNameFirsReceived, info.firs_received},
       {StatsReport::kStatsValueNameFrameHeightSent, info.send_frame_height},
-      {StatsReport::kStatsValueNameFrameRateInput, round(info.framerate_input)},
+      {StatsReport::kStatsValueNameFrameRateInput, (int)round(info.framerate_input)},
       {StatsReport::kStatsValueNameFrameRateSent, info.framerate_sent},
       {StatsReport::kStatsValueNameFrameWidthSent, info.send_frame_width},
-      {StatsReport::kStatsValueNameNacksReceived, info.nacks_received},
+      {StatsReport::kStatsValueNameNacksReceived, (int)info.nacks_received},
       {StatsReport::kStatsValueNamePacketsLost, info.packets_lost},
       {StatsReport::kStatsValueNamePacketsSent, info.packets_sent},
       {StatsReport::kStatsValueNamePlisReceived, info.plis_received},
-      {StatsReport::kStatsValueNameFramesEncoded, info.frames_encoded},
-      {StatsReport::kStatsValueNameHugeFramesSent, info.huge_frames_sent},
+      {StatsReport::kStatsValueNameFramesEncoded, (int)info.frames_encoded},
+      {StatsReport::kStatsValueNameHugeFramesSent, (int)info.huge_frames_sent},
   };
 
   for (const auto& i : ints)
@@ -780,19 +780,19 @@
                 AddCandidateReport(remote_candidate_stats, false)->id());
 
   const Int64ForAdd int64s[] = {
-      {StatsReport::kStatsValueNameBytesReceived, info.recv_total_bytes},
-      {StatsReport::kStatsValueNameBytesSent, info.sent_total_bytes},
-      {StatsReport::kStatsValueNamePacketsSent, info.sent_total_packets},
-      {StatsReport::kStatsValueNameRtt, info.rtt},
+      {StatsReport::kStatsValueNameBytesReceived, (long)info.recv_total_bytes},
+      {StatsReport::kStatsValueNameBytesSent, (long)info.sent_total_bytes},
+      {StatsReport::kStatsValueNamePacketsSent, (long)info.sent_total_packets},
+      {StatsReport::kStatsValueNameRtt, (long)info.rtt},
       {StatsReport::kStatsValueNameSendPacketsDiscarded,
-       info.sent_discarded_packets},
+       (long)info.sent_discarded_packets},
       {StatsReport::kStatsValueNameSentPingRequestsTotal,
-       info.sent_ping_requests_total},
+       (long)info.sent_ping_requests_total},
       {StatsReport::kStatsValueNameSentPingRequestsBeforeFirstResponse,
-       info.sent_ping_requests_before_first_response},
-      {StatsReport::kStatsValueNameSentPingResponses, info.sent_ping_responses},
-      {StatsReport::kStatsValueNameRecvPingRequests, info.recv_ping_requests},
-      {StatsReport::kStatsValueNameRecvPingResponses, info.recv_ping_responses},
+       (long)info.sent_ping_requests_before_first_response},
+      {StatsReport::kStatsValueNameSentPingResponses, (long)info.sent_ping_responses},
+      {StatsReport::kStatsValueNameRecvPingRequests, (long)info.recv_ping_requests},
+      {StatsReport::kStatsValueNameRecvPingResponses, (long)info.recv_ping_responses},
   };
   for (const auto& i : int64s)
     report->AddInt64(i.name, i.value);

--- a/cc/layers/mirror_layer_impl.h	
+++ b/cc/layers/mirror_layer_impl.h
@@ -56,7 +56,7 @@
  private:
   const char* LayerTypeAsString() const override;
   viz::CompositorRenderPassId mirrored_layer_render_pass_id() const {
-    return viz::CompositorRenderPassId{mirrored_layer_id()};
+    return viz::CompositorRenderPassId{(unsigned long)mirrored_layer_id()};
   }
 
   int mirrored_layer_id_ = 0;
